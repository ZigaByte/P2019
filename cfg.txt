source -> decl decl' .

decl' -> decl decl' .
decl' -> .
decl -> typ identifier : type ; .
decl -> var identifier : type ; .
decl -> fun identifier ( args ) : type body ; .

body -> = expr .
body -> .

arg -> identifier : type .
args -> arg args' .
args -> .
args' -> , arg args' .
args' -> .

type -> void .
type -> bool .
type -> char .
type -> int .
type -> arr [ expr ] type .
type -> rec ( args ) .
type -> ptr type .
type -> identifier .
type -> ( type ) .

stmt -> expr body ; .
stmt' -> stmt stmt' | .
stmt -> if expr then stmt stmt' else_block end ; .
stmt -> while expr do stmt stmt' end ; .
else_block -> else stmt stmt' .
else_block -> .

args_expr -> expr args_expr' .
args_expr -> .
args_expr' -> , expr args_expr' .
args_expr' -> .
where_block -> where decl decl' .

expr -> DisjExpr .

DisjExpr -> ConjExpr DisjExpr' .
DisjExpr' -> OR ConjExpr DisjExpr' .
DisjExpr' -> ^ ConjExpr DisjExpr' .
DisjExpr' -> .

ConjExpr -> RelExpr ConjExpr' .
ConjExpr' -> & RelExpr ConjExpr' .
ConjExpr' -> .

RelExpr -> AddExpr RelExpr' .
RelExpr' -> == AddExpr .
RelExpr' -> != AddExpr .
RelExpr' -> <= AddExpr .
RelExpr' -> >= AddExpr .
RelExpr' -> < AddExpr .
RelExpr' -> > AddExpr .
RelExpr' -> .

AddExpr -> MulExpr AddExpr' .
AddExpr' -> + MulExpr AddExpr' .
AddExpr' -> - MulExpr AddExpr' .
AddExpr' -> .

MulExpr -> PrefExpr MulExpr' .
MulExpr' -> * PrefExpr MulExpr' .
MulExpr' -> / PrefExpr MulExpr' .
MulExpr' -> % PrefExpr MulExpr' .
MulExpr' -> .

PrefExpr -> ! PrefExpr .
PrefExpr -> + PrefExpr .
PrefExpr -> - PrefExpr .
PrefExpr -> $ PrefExpr .
PrefExpr -> @ PrefExpr .
PrefExpr -> new ( type ) .
PrefExpr -> del ( expr ) .
PrefExpr -> PstfExpr .

PstfExpr -> CastExpr PstfExpr' .
PstfExpr' -> [ expr ] PstfExpr' .
PstfExpr' -> DOT identifier PstfExpr' .
PstfExpr' -> .

CastExpr -> ( expr expr_cast .
CastExpr -> AtomExpr .

AtomExpr -> literal .
AtomExpr -> identifier expr_call .
AtomExpr -> { stmt stmt' : expr where_block } .

expr_call -> ( args_expr ) .
expr_call -> .
expr_cast -> : type ) .
expr_cast -> ) .
